pipeline {
    agent any

    stages {
        stage('git clone') {
            steps {
                git branch: 'be-dev', url: 'https://github.com/beyond-sw-camp/be06-fin-SENAGAE-Enadu.git'
            }
        }

        stage('ADD PRIVILIGES'){
            steps{
                dir('./back/batch'){
                    sh 'echo 권한 추가'
                    sh 'chmod +x gradlew'
                }
            }
        }
        stage('Build') {
            steps {
                dir('./back/batch'){
                    sh 'echo 배치 빌드 중...'
                    sh './gradlew bootJar'
                }
            }
        }
        stage('Build Docker Image'){
            steps {
                dir('./back/batch'){
                    sh 'echo 도커 이미지 빌드'
                    sh 'docker build -t senagae/enadu-batch:1.$BUILD_ID .'
                }
            }
        }

        stage('Docker Push'){
            steps {
                script {
                    sh 'echo 도커 로그인'
                    sh 'docker login -u ${DOCKER_ID} -p ${DOCKER_PW}'

                    sh 'echo 도커 허브에 푸시'
                    sh 'docker push senagae/enadu-batch:1.$BUILD_ID'
                }
            }
        }

        stage('SSH transfer'){
            steps {
                script {
                    sshPublisher(
                        // 오류 발생 시 진행을 멈춤
                        continueOnError: false,
                        // 오류 발생 시 파이프라인을 실패시킴
                        failOnError: true,
                        // 전송자 목록
                        publishers: [
                            // SSH 전송 설명
                            sshPublisherDesc(
                                // SSH 서버 설정 이름 지정 ( master 노드 )
                                configName: "jenkins-k8s",
                                // 자세한 출력 모드 활성화
                                verbose: true,
                                transfers: [
                                    sshTransfer(
                                        sourceFiles: "cicd/batch/batch-aianswer-cronjob.yaml",
                                        remoteDirectory: "/home/test",
                                        execCommand: '''
                                            sed -i "s/latest/1.$BUILD_ID/g" cicd/batch/batch-aianswer-cronjob.yaml
                                            kubectl apply -f /home/test/cicd/batch/batch-aianswer-cronjob.yaml
                                        '''
                                    ),
                                    sshTransfer(
                                        sourceFiles: "cicd/batch/batch-dailyranking-cronjob.yaml",
                                        remoteDirectory: "/home/test",
                                        execCommand: '''
                                            sed -i "s/latest/1.$BUILD_ID/g" cicd/batch/batch-dailyranking-cronjob.yaml
                                            kubectl apply -f /home/test/cicd/batch/batch-dailyranking-cronjob.yaml
                                        '''
                                    ),
                                    sshTransfer(
                                        sourceFiles: "cicd/batch/batch-unanswered-cronjob.yaml",
                                        remoteDirectory: "/home/test",
                                        execCommand: '''
                                            sed -i "s/latest/1.$BUILD_ID/g" cicd/batch/batch-unanswered-cronjob.yaml
                                            kubectl apply -f /home/test/cicd/batch/batch-unanswered-cronjob.yaml
                                        '''
                                    ),
                                ]
                            )
                        ]
                    )
                }
            }
        }
    }
    post {
        success {
            withCredentials([string(credentialsId: 'Discord', variable: 'DISCORD')]) {
                        discordSend description: """
                        제목 : ${currentBuild.displayName}
                        결과 : ${currentBuild.result}
                        실행 시간 : ${currentBuild.duration / 1000}s
                        """,
                        link: env.BUILD_URL, result: currentBuild.currentResult,
                        title: "${env.JOB_NAME} : ${currentBuild.displayName} 성공",
                        webhookURL: "$DISCORD"
            }
        }
        failure {
            withCredentials([string(credentialsId: 'Discord', variable: 'DISCORD')]) {
                        discordSend description: """
                        제목 : ${currentBuild.displayName}
                        결과 : ${currentBuild.result}
                        실행 시간 : ${currentBuild.duration / 1000}s
                        """,
                        link: env.BUILD_URL, result: currentBuild.currentResult,
                        title: "${env.JOB_NAME} : ${currentBuild.displayName} 실패",
                        webhookURL: "$DISCORD"
            }
        }
    }
}

